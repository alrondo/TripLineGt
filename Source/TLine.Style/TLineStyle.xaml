<!-- Contains Color, SolidColorBrush and Styles reused in all DP-1000 applications -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:Dialog="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro">
    
    <Color x:Key="TripLineWhite">#FFFFFFFF</Color>
    <Color x:Key="TripLineBlack">#FF000000</Color>

    <Color x:Key="LightGreen">#C3CB2B</Color>
    <Color x:Key="DarkGreen">#9CA222</Color>

    <!-- Grey - From darker to lighter -->
    <!-- Background color -->
    <Color x:Key="Grey55">#373F44</Color>
    <!-- Title bar background color -->
    <Color x:Key="Grey115">#73767A</Color>
    <!-- Colum bar bottom border color -->
    <Color x:Key="Grey176">#AAAAAA</Color>
    <!-- Colum bar bottom border color -->
    <Color x:Key="Grey204">#CCCCCC</Color>
    <!-- Column bar scrolly background color -->
    <Color x:Key="Grey225">#E1E1E1</Color>
    <!-- Text box background color -->
    <Color x:Key="Grey240">#F0F0F0</Color>
    
    <!-- 
            Other used color. To be reviewed
        -->
    
    <!-- Message Color -->
    <Color x:Key="Red">#FF0000</Color>
    <Color x:Key="LightRed">#AA0000</Color>
    <Color x:Key="OrangeRed">#FFFF4500</Color>
    <Color x:Key="CornflowerBlue">#FF6495ED</Color>
    
    <!-- TLineView colors -->
    <Color x:Key="Black30">#FF1E1A0C</Color>
    <Color x:Key="Black37">#FF252828</Color>
    <Color x:Key="Black169">#FFA9A9A9</Color>

    <!-- Channel Colors -->
    <Color x:Key="LimeGreen">#FF32CD32</Color>
    <Color x:Key="LightLimeGreen">#4DFF4D</Color>
    <Color x:Key="Grey128">#FF808080</Color>
    <Color x:Key="Yellow">#FFFFFF00</Color>

    <!-- Spectrum Card -->  
    <Color x:Key="Grey142">#FF8E8F92</Color>
    <Color x:Key="Grey38">#FF262D32</Color>
    <Color x:Key="Grey47">#FF2F383E</Color>
    <Color x:Key="CadetBlue">#FF5F9EA0</Color>
    <Color x:Key="Azure">#FFF0FFFF</Color>
    
    <!-- Capture File -->
    <Color x:Key="Grey43">#2B2B2B</Color>
    
    <!-- Progress bar -->
    <Color x:Key="Grey149">#59959595</Color>

    <Color x:Key="RealDarkGreen">#006600</Color>

    <Color x:Key="LightBeige">#F0F0F0</Color>
    <Color x:Key="ConnectionButtonDisableColor">#FF323232</Color>

    <!--
            Brush Definition
        -->

    <SolidColorBrush x:Key="TripLineWhiteBrush" Color="{DynamicResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="TripLineBlackBrush" Color="{DynamicResource TripLineBlack}" po:Freeze="True" />
    <SolidColorBrush x:Key="TripLineApplicationFontBrush" Color="{DynamicResource Grey115}" po:Freeze="True" />
    <SolidColorBrush x:Key="TripLineSelectedItemBrush" Color="{StaticResource LightGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="TripLineSelectedTextBrush" Color="{StaticResource DarkGreen}" po:Freeze="True" />

    

    <!-- Header -->
    <SolidColorBrush x:Key="HeaderSectionBackgroundColor" Color="{StaticResource Grey115}" po:Freeze="True" />
    <SolidColorBrush x:Key="HeaderForegroundColor" Color="White" po:Freeze="True" />
    <SolidColorBrush x:Key="HeaderSectionLightBackgroundColor" Color="{StaticResource LightBeige}" po:Freeze="True" />

    <!-- Xceed DataGrid Brush. System.Window.Control.Grid colors are defined via Mahapps (see TLine.Style\TLineTheme) -->
    <SolidColorBrush x:Key="DataGridBackgroundColor" Color="{StaticResource Grey240}" po:Freeze="True" />
    <SolidColorBrush x:Key="DataGridBackgroundColor4LightTheme" Color="{StaticResource LightBeige }" po:Freeze="True" />
    
    <SolidColorBrush x:Key="DataGridForegroundColor" Color="Black" po:Freeze="True" />
    <SolidColorBrush x:Key="DataGridSelectionBackgroundColor" Color="{StaticResource LightGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="DataGridSelectionForegroundColor" Color="Black" po:Freeze="True" />
    <SolidColorBrush x:Key="DataGridCurrentBackgroundColor" Color="Transparent" po:Freeze="True" />
    <SolidColorBrush x:Key="DataGridCurrentForegroundColor" Color="Black" po:Freeze="True" />
    <SolidColorBrush x:Key="DataGridColumnHeaderBackgroundColor" Color="{StaticResource Grey225}" po:Freeze="True" />
    <SolidColorBrush x:Key="DataGridColumnHeaderBorderBottomColor" Color="{StaticResource Grey204}" po:Freeze="True" />
    <SolidColorBrush x:Key="DataGridColumnHeaderTextColor" Color="{StaticResource TripLineBlack}" po:Freeze="True" />

    <!-- Text -->
    <SolidColorBrush x:Key="ErrorMessage" Color="{StaticResource Red}" po:Freeze="True" />

    <!-- Text Box -->
    <SolidColorBrush x:Key="TextBoxBackgroundColor" Color="{StaticResource Grey240}" po:Freeze="True" />
    
    <!-- ListBox -->
    <SolidColorBrush x:Key="ListBoxTextBrush" Color="{StaticResource TripLineBlack}" po:Freeze="True" />

    <!-- Dialog -->
    <SolidColorBrush x:Key="WaitDialogBackgroundColor" Color="{StaticResource Grey55}" po:Freeze="True" />
    <SolidColorBrush x:Key="SimpleDialogOutsideBackgroundBrush" Color="{StaticResource TripLineBlack}" po:Freeze="True" />
    <SolidColorBrush x:Key="SimpleDialogBackgroundColor" Color="{StaticResource Black37}" po:Freeze="True" />
    
    <!-- User Control -->
    <SolidColorBrush x:Key="UserControlBackgroundColor" Color="{StaticResource Grey55}" po:Freeze="True" />
    
    <!-- Packet Details -->
    <SolidColorBrush x:Key="PacketDetailsBackgroundColor" Color="{StaticResource Grey240}" po:Freeze="True" />
    <SolidColorBrush x:Key="PacketDetailsForegroundColor" Color="{StaticResource TripLineBlack}" po:Freeze="True" />

    <!-- Packet Hex -->
    <SolidColorBrush x:Key="PacketHexBackgroundColor" Color="{StaticResource Grey240}" po:Freeze="True" />
    <SolidColorBrush x:Key="PacketHexForegroundColor" Color="{StaticResource TripLineBlack}" po:Freeze="True" />

    <!-- Splitter -->
    <SolidColorBrush x:Key="SplitterBackgroundColor" Color="Transparent" po:Freeze="True" />

    <!-- Capture File Information Flyout -->
    <SolidColorBrush x:Key="CaptureFileInfoGridBorderColor" Color="{StaticResource LightGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="CaptureFileInfoBackgroundColor" Color="{StaticResource Grey43}" po:Freeze="True" />

    <!-- TLineView colors-->
    <SolidColorBrush x:Key="TLineViewBackground" Color="{StaticResource Grey55}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewHeaderBackground" Color="{StaticResource Black30}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewBackgroundPanel" Color="{StaticResource Black37}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewButtonBorderBrush" Color="{StaticResource Grey128}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewButtonPressedBackgroudBrush" Color="{StaticResource Grey176}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewTitleBrush" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewDescriptionBrush" Color="{StaticResource Black169}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewControlDisabledBackgroundBrush" Color="{StaticResource Grey55}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewControlDisabledBorderBrush" Color="{StaticResource Grey204}" po:Freeze="True" />
    <SolidColorBrush x:Key="TLineViewControlBorderBrush" Color="{StaticResource Grey240}" po:Freeze="True" />

    <!-- Tab -->
    <SolidColorBrush x:Key="SelectedTabColor" Color="{StaticResource Grey55}" po:Freeze="True" />
    <SolidColorBrush x:Key="TabButtonBackground" Color="{StaticResource Grey55}" po:Freeze="True" />
    <SolidColorBrush x:Key="TabButtonBorder" Color="{StaticResource Grey55}"  po:Freeze="True"/>
    <SolidColorBrush x:Key="TabButtonBackgroundMouseOver" Color="{StaticResource Grey225}" po:Freeze="True" />
    <SolidColorBrush x:Key="TabButtonTextUnselected" Color="{StaticResource TripLineBlack}"  po:Freeze="True"/>
    <SolidColorBrush x:Key="TabButtonTextSelected" Color="{StaticResource TripLineWhite}" po:Freeze="True" />

    <!-- Button -->
    <SolidColorBrush x:Key="HomeButtonBrush" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="ConnectionButton.EnableBrush" Color="{StaticResource Grey55}" po:Freeze="True" />
    <SolidColorBrush x:Key="ConnectionButton.DisableBrush" Color="{StaticResource ConnectionButtonDisableColor}" po:Freeze="True" />

    <!-- Progress bar -->
    <SolidColorBrush x:Key="ProgressBarBrush" Color="{StaticResource Grey149}" po:Freeze="True" />
    
    <!-- Channel -->
    <SolidColorBrush x:Key="ChannelEnabledAndLocked" Color="{StaticResource LimeGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="ChannelDisabled" Color="{StaticResource Grey128}" po:Freeze="True" />
    <SolidColorBrush x:Key="ChannelEnabledButNotLocked" Color="{StaticResource Yellow}" po:Freeze="True" />
    <SolidColorBrush x:Key="ChannelInfoBackground" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="ChannelPlotBrush" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="PlotBrush" Color="{StaticResource LightGreen}" po:Freeze="True" />

    <!--Spectrum Card -->
    <SolidColorBrush x:Key="SpectrumCardBackground" Color="{StaticResource Grey204}" po:Freeze="True" />
    <SolidColorBrush x:Key="SelectedSpectrumCardBackground" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumCardNameBrush" Color="{StaticResource Grey142}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumCardDarkBackground" Color="{StaticResource Grey38}" po:Freeze="True"  />
    <SolidColorBrush x:Key="CardInfoBackground" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="CardInfoConstellationBackgroundBrush" Color="{StaticResource TripLineBlack}" po:Freeze="True" />
    <SolidColorBrush x:Key="CardInfoConstellationTextBrush" Color="{StaticResource TripLineBlack}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumCardSide" Color="{StaticResource Grey47}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumCardTextBrush" Color="{StaticResource TripLineBlack}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumCardChannelStateBorderBrush" Color="{StaticResource TripLineBlack}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumCardPressedBrush" Color="{StaticResource CadetBlue}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumCardUnPressedBrush" Color="{StaticResource Azure}" po:Freeze="True" />
    <SolidColorBrush x:Key="ConstellationTargetBrush" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="ConstellationBrush" Color="{StaticResource LightGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumSignalPowerBackgroundBrush" Color="{StaticResource LightGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="SpectrumSignalBrush" Color="{StaticResource LightGreen}" po:Freeze="True" />

    <SolidColorBrush x:Key="OfdmEcludedSubCarrierBrush" Color="{StaticResource LightLimeGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="OfdmDataSubCarrierBrush" Color="{StaticResource LightLimeGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="OfdmContinuousPilotBrush" Color="{StaticResource LimeGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="OfdmPlcPilotBrush" Color="{StaticResource Yellow}" po:Freeze="True" />

    <!-- DP GUI config button popup menu (Save, Save as, Load) -->
    <SolidColorBrush x:Key="ConfigButtonBackgroundBrush" Color="{StaticResource Grey55}" po:Freeze="True" />
    <SolidColorBrush x:Key="ConfigButtonBorderBrush" Color="{StaticResource TripLineBlack}" po:Freeze="True" />
    <SolidColorBrush x:Key="ConfigButtonBrush" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    
    <!-- Notification  -->
    <SolidColorBrush x:Key="NotificationButtonBadgeBrush" Color="{StaticResource OrangeRed}" po:Freeze="True" />
    <SolidColorBrush x:Key="NotificationButtonBadgeTextBrush" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="NotificationButtonBackgroundBrush" Color="{StaticResource TripLineWhite}" po:Freeze="True" />
    <SolidColorBrush x:Key="NotificationText" Color="{StaticResource TripLineBlack}" po:Freeze="True" />
    <SolidColorBrush x:Key="NotificationBackgroundBrush" Color="{StaticResource CornflowerBlue}" po:Freeze="True" />
    <SolidColorBrush x:Key="NotificationWarningBackgroundBrush" Color="{StaticResource OrangeRed}" po:Freeze="True" />
    <SolidColorBrush x:Key="NotificationErrorBackgroundBrush" Color="{StaticResource Red}" po:Freeze="True" />
    
    <!--DAS Filter Panel-->
    <SolidColorBrush x:Key="EnabledFilterToggleButtonBrush" Color="{StaticResource LightGreen}" po:Freeze="True" />
    <SolidColorBrush x:Key="HoveredEnabledFilterToggleButtonBrush" Color="{StaticResource LightGreen}" Opacity=".5"  po:Freeze="True" />


    <!--
            Font
        -->
    
    <FontFamily x:Key="PacketInfoFont">Courier New</FontFamily>

    <!--
            Implicit Styles (override the default property value of a control type)
    -->

    <Style TargetType="GridSplitter">
        <Setter Property="Background" Value="{StaticResource SplitterBackgroundColor}" />
    </Style>

    <!-- Checkbox -->
    <DataTemplate x:Key="CheckmarkUnchecked">
        <Canvas   Width="76" Height="76" Clip="F1 M 0,0L 76,0L 76,76L 0,76L 0,0">
            <Path  Width="30" Height="30" Canvas.Left="4" Canvas.Top="4" Stretch="Fill" Fill="#FFFF" Data="F1 M 23,23L 53,23L 53,53L 23,53L 23,23 Z M 28,28L 28,48L 48,48L 48,28L 28,28 Z "/>
        </Canvas>
    </DataTemplate>
    <DataTemplate x:Key="CheckmarkChecked">
        <Canvas   Width="76" Height="76" Clip="F1 M 0,0L 76,0L 76,76L 0,76L 0,0">
            <Path  Width="34.2877" Height="29.4585" Canvas.Left="4" Canvas.Top="4" Stretch="Fill" Fill="#FFFF" Data="F1 M 32.2209,33.4875L 39.1875,40.0582L 52.9627,24.5415L 56.2877,27.4707L 39.5834,47.5L 28.8959,36.8125L 32.2209,33.4875 Z M 22,25L 50,25L 45.5,30L 27,30L 27,49L 46,49L 46,42.5L 51,36.5L 51,54L 22,54L 22,25 Z "/>
        </Canvas>
    </DataTemplate>
    
    <!-- 
            Styles
        -->

    <Style x:Key="TripLineCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>


    <Style x:Key="HostConnectionButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ConnectionButton.EnableBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource HighlightBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ConnectionButton.DisableBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>        
    </Style>
  
    <Style x:Key="TripLineToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush2}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource UpperCaseContentFontSize}"/>
        <Setter Property="Control.FontWeight" Value="Bold"/>
        <Setter Property="Control.Padding" Value="5,6"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.MinHeight" Value="25"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border Name="Background"
                                     BorderBrush="{TemplateBinding Control.BorderBrush}"
                                     BorderThickness="{TemplateBinding Control.BorderThickness}"
                                     Background="{TemplateBinding Control.Background}"
                                     CornerRadius="2"/>
                        <Rectangle Name="DisabledVisualElement"
                                     Fill="{DynamicResource WhiteBrush}"
                                     IsHitTestVisible="False"
                                     Opacity="0"
                                     RadiusY="3"
                                     RadiusX="3"/>
                        <ContentPresenter Name="contentPresenter"
                                     RecognizesAccessKey="True"
                                     ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                     Content="{TemplateBinding ContentControl.Content}"
                                     HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                     Margin="{TemplateBinding Control.Padding}"
                                     VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="Background"
                                             Property="Border.BorderThickness"
                                             Value="2"/>
                            <Setter TargetName="Background"
                                             Value="{StaticResource EnabledFilterToggleButtonBrush}"
                                             Property="Border.Background"/>
                            <Setter TargetName="Background"
                                             Value="{DynamicResource GrayBrush7}"
                                             Property="Border.BorderBrush"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="True"/>
                                <Condition Property="ToggleButton.IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background"
                                         Value="{DynamicResource GrayBrush2}"
                                         Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="True"/>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background"
                                         Value="{DynamicResource HoveredEnabledFilterToggleButtonBrush}"
                                         Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter TargetName="Background"
                                             Value="{DynamicResource GrayBrush7}"
                                             Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background"
                                             Property="Border.BorderThickness"
                                             Value="2"/>
                            <Setter TargetName="Background"
                                             Value="{DynamicResource ButtonMouseOverBorderBrush}"
                                             Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter TargetName="DisabledVisualElement"
                                             Property="UIElement.Opacity"
                                             Value="0.7"/>
                            <Setter TargetName="contentPresenter"
                                             Property="UIElement.Opacity"
                                             Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Expander" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush2}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource UpperCaseContentFontSize}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="-1,1"/>
        <Setter Property="FrameworkElement.MinHeight" Value="15"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border Name="Background"
                                     BorderBrush="{TemplateBinding Control.BorderBrush}"
                                     BorderThickness="{TemplateBinding Control.BorderThickness}"
                                     Background="{TemplateBinding Control.Background}"
                                     CornerRadius="2"/>
                        <Rectangle Name="DisabledVisualElement"
                                     Fill="{DynamicResource WhiteBrush}"
                                     IsHitTestVisible="False"
                                     Opacity="0"
                                     RadiusY="3"
                                     RadiusX="3"/>
                        <ContentPresenter Name="contentPresenter"
                                     RecognizesAccessKey="True"
                                     ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                     Content="{TemplateBinding ContentControl.Content}"
                                     HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                     Margin="{TemplateBinding Control.Padding}"
                                     VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="Background"
                                             Property="Border.BorderThickness"
                                             Value="2"/>
                            <Setter TargetName="Background"
                                             Value="{StaticResource EnabledFilterToggleButtonBrush}"
                                             Property="Border.Background"/>
                            <Setter TargetName="Background"
                                             Value="{DynamicResource GrayBrush7}"
                                             Property="Border.BorderBrush"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="True"/>
                                <Condition Property="ToggleButton.IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background"
                                         Value="{DynamicResource GrayBrush2}"
                                         Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="True"/>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background"
                                         Value="{DynamicResource HoveredEnabledFilterToggleButtonBrush}"
                                         Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter TargetName="Background"
                                             Value="{DynamicResource GrayBrush7}"
                                             Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background"
                                             Property="Border.BorderThickness"
                                             Value="2"/>
                            <Setter TargetName="Background"
                                             Value="{DynamicResource ButtonMouseOverBorderBrush}"
                                             Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter TargetName="DisabledVisualElement"
                                             Property="UIElement.Opacity"
                                             Value="0.7"/>
                            <Setter TargetName="contentPresenter"
                                             Property="UIElement.Opacity"
                                             Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
